// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/movie.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/RiskyFeryansyahP/bibit-movies/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecaseMovie is a mock of UsecaseMovie interface.
type MockUsecaseMovie struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMovieMockRecorder
}

// MockUsecaseMovieMockRecorder is the mock recorder for MockUsecaseMovie.
type MockUsecaseMovieMockRecorder struct {
	mock *MockUsecaseMovie
}

// NewMockUsecaseMovie creates a new mock instance.
func NewMockUsecaseMovie(ctrl *gomock.Controller) *MockUsecaseMovie {
	mock := &MockUsecaseMovie{ctrl: ctrl}
	mock.recorder = &MockUsecaseMovieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecaseMovie) EXPECT() *MockUsecaseMovieMockRecorder {
	return m.recorder
}

// DetailMovie mocks base method.
func (m *MockUsecaseMovie) DetailMovie(ctx context.Context, id string) (*model.MovieRPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetailMovie", ctx, id)
	ret0, _ := ret[0].(*model.MovieRPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetailMovie indicates an expected call of DetailMovie.
func (mr *MockUsecaseMovieMockRecorder) DetailMovie(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailMovie", reflect.TypeOf((*MockUsecaseMovie)(nil).DetailMovie), ctx, id)
}

// SearchValidate mocks base method.
func (m *MockUsecaseMovie) SearchValidate(ctx context.Context, keyword, page string) ([]*model.MovieRPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchValidate", ctx, keyword, page)
	ret0, _ := ret[0].([]*model.MovieRPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchValidate indicates an expected call of SearchValidate.
func (mr *MockUsecaseMovieMockRecorder) SearchValidate(ctx, keyword, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchValidate", reflect.TypeOf((*MockUsecaseMovie)(nil).SearchValidate), ctx, keyword, page)
}

// MockRepositoryMovie is a mock of RepositoryMovie interface.
type MockRepositoryMovie struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMovieMockRecorder
}

// MockRepositoryMovieMockRecorder is the mock recorder for MockRepositoryMovie.
type MockRepositoryMovieMockRecorder struct {
	mock *MockRepositoryMovie
}

// NewMockRepositoryMovie creates a new mock instance.
func NewMockRepositoryMovie(ctrl *gomock.Controller) *MockRepositoryMovie {
	mock := &MockRepositoryMovie{ctrl: ctrl}
	mock.recorder = &MockRepositoryMovieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryMovie) EXPECT() *MockRepositoryMovieMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockRepositoryMovie) GetByID(ctx context.Context, id string) (*model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryMovieMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepositoryMovie)(nil).GetByID), ctx, id)
}

// Search mocks base method.
func (m *MockRepositoryMovie) Search(ctx context.Context, keyword, page string) (*model.MovieSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, keyword, page)
	ret0, _ := ret[0].(*model.MovieSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockRepositoryMovieMockRecorder) Search(ctx, keyword, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepositoryMovie)(nil).Search), ctx, keyword, page)
}
