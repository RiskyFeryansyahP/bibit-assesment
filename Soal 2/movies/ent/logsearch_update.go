// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/RiskyFeryansyahP/bibit-movies/ent/logsearch"
	"github.com/RiskyFeryansyahP/bibit-movies/ent/predicate"
)

// LogSearchUpdate is the builder for updating LogSearch entities.
type LogSearchUpdate struct {
	config
	hooks    []Hook
	mutation *LogSearchMutation
}

// Where appends a list predicates to the LogSearchUpdate builder.
func (lsu *LogSearchUpdate) Where(ps ...predicate.LogSearch) *LogSearchUpdate {
	lsu.mutation.Where(ps...)
	return lsu
}

// SetKeyword sets the "keyword" field.
func (lsu *LogSearchUpdate) SetKeyword(s string) *LogSearchUpdate {
	lsu.mutation.SetKeyword(s)
	return lsu
}

// SetPage sets the "page" field.
func (lsu *LogSearchUpdate) SetPage(s string) *LogSearchUpdate {
	lsu.mutation.SetPage(s)
	return lsu
}

// SetCreatedAt sets the "created_at" field.
func (lsu *LogSearchUpdate) SetCreatedAt(t time.Time) *LogSearchUpdate {
	lsu.mutation.SetCreatedAt(t)
	return lsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lsu *LogSearchUpdate) SetNillableCreatedAt(t *time.Time) *LogSearchUpdate {
	if t != nil {
		lsu.SetCreatedAt(*t)
	}
	return lsu
}

// Mutation returns the LogSearchMutation object of the builder.
func (lsu *LogSearchUpdate) Mutation() *LogSearchMutation {
	return lsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lsu *LogSearchUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(lsu.hooks) == 0 {
		affected, err = lsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LogSearchMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lsu.mutation = mutation
			affected, err = lsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lsu.hooks) - 1; i >= 0; i-- {
			if lsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lsu *LogSearchUpdate) SaveX(ctx context.Context) int {
	affected, err := lsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lsu *LogSearchUpdate) Exec(ctx context.Context) error {
	_, err := lsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lsu *LogSearchUpdate) ExecX(ctx context.Context) {
	if err := lsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lsu *LogSearchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   logsearch.Table,
			Columns: logsearch.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: logsearch.FieldID,
			},
		},
	}
	if ps := lsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lsu.mutation.Keyword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: logsearch.FieldKeyword,
		})
	}
	if value, ok := lsu.mutation.Page(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: logsearch.FieldPage,
		})
	}
	if value, ok := lsu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: logsearch.FieldCreatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logsearch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// LogSearchUpdateOne is the builder for updating a single LogSearch entity.
type LogSearchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LogSearchMutation
}

// SetKeyword sets the "keyword" field.
func (lsuo *LogSearchUpdateOne) SetKeyword(s string) *LogSearchUpdateOne {
	lsuo.mutation.SetKeyword(s)
	return lsuo
}

// SetPage sets the "page" field.
func (lsuo *LogSearchUpdateOne) SetPage(s string) *LogSearchUpdateOne {
	lsuo.mutation.SetPage(s)
	return lsuo
}

// SetCreatedAt sets the "created_at" field.
func (lsuo *LogSearchUpdateOne) SetCreatedAt(t time.Time) *LogSearchUpdateOne {
	lsuo.mutation.SetCreatedAt(t)
	return lsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lsuo *LogSearchUpdateOne) SetNillableCreatedAt(t *time.Time) *LogSearchUpdateOne {
	if t != nil {
		lsuo.SetCreatedAt(*t)
	}
	return lsuo
}

// Mutation returns the LogSearchMutation object of the builder.
func (lsuo *LogSearchUpdateOne) Mutation() *LogSearchMutation {
	return lsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lsuo *LogSearchUpdateOne) Select(field string, fields ...string) *LogSearchUpdateOne {
	lsuo.fields = append([]string{field}, fields...)
	return lsuo
}

// Save executes the query and returns the updated LogSearch entity.
func (lsuo *LogSearchUpdateOne) Save(ctx context.Context) (*LogSearch, error) {
	var (
		err  error
		node *LogSearch
	)
	if len(lsuo.hooks) == 0 {
		node, err = lsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LogSearchMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lsuo.mutation = mutation
			node, err = lsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lsuo.hooks) - 1; i >= 0; i-- {
			if lsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (lsuo *LogSearchUpdateOne) SaveX(ctx context.Context) *LogSearch {
	node, err := lsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lsuo *LogSearchUpdateOne) Exec(ctx context.Context) error {
	_, err := lsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lsuo *LogSearchUpdateOne) ExecX(ctx context.Context) {
	if err := lsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lsuo *LogSearchUpdateOne) sqlSave(ctx context.Context) (_node *LogSearch, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   logsearch.Table,
			Columns: logsearch.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: logsearch.FieldID,
			},
		},
	}
	id, ok := lsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing LogSearch.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := lsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, logsearch.FieldID)
		for _, f := range fields {
			if !logsearch.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != logsearch.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lsuo.mutation.Keyword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: logsearch.FieldKeyword,
		})
	}
	if value, ok := lsuo.mutation.Page(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: logsearch.FieldPage,
		})
	}
	if value, ok := lsuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: logsearch.FieldCreatedAt,
		})
	}
	_node = &LogSearch{config: lsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logsearch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
