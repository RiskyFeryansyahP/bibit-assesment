// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/RiskyFeryansyahP/bibit-movies/ent/logsearch"
)

// LogSearch is the model entity for the LogSearch schema.
type LogSearch struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Keyword holds the value of the "keyword" field.
	Keyword string `json:"keyword,omitempty"`
	// Page holds the value of the "page" field.
	Page string `json:"page,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LogSearch) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case logsearch.FieldID:
			values[i] = new(sql.NullInt64)
		case logsearch.FieldKeyword, logsearch.FieldPage:
			values[i] = new(sql.NullString)
		case logsearch.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LogSearch", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LogSearch fields.
func (ls *LogSearch) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case logsearch.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ls.ID = int(value.Int64)
		case logsearch.FieldKeyword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field keyword", values[i])
			} else if value.Valid {
				ls.Keyword = value.String
			}
		case logsearch.FieldPage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field page", values[i])
			} else if value.Valid {
				ls.Page = value.String
			}
		case logsearch.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ls.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this LogSearch.
// Note that you need to call LogSearch.Unwrap() before calling this method if this LogSearch
// was returned from a transaction, and the transaction was committed or rolled back.
func (ls *LogSearch) Update() *LogSearchUpdateOne {
	return (&LogSearchClient{config: ls.config}).UpdateOne(ls)
}

// Unwrap unwraps the LogSearch entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ls *LogSearch) Unwrap() *LogSearch {
	tx, ok := ls.config.driver.(*txDriver)
	if !ok {
		panic("ent: LogSearch is not a transactional entity")
	}
	ls.config.driver = tx.drv
	return ls
}

// String implements the fmt.Stringer.
func (ls *LogSearch) String() string {
	var builder strings.Builder
	builder.WriteString("LogSearch(")
	builder.WriteString(fmt.Sprintf("id=%v", ls.ID))
	builder.WriteString(", keyword=")
	builder.WriteString(ls.Keyword)
	builder.WriteString(", page=")
	builder.WriteString(ls.Page)
	builder.WriteString(", created_at=")
	builder.WriteString(ls.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LogSearches is a parsable slice of LogSearch.
type LogSearches []*LogSearch

func (ls LogSearches) config(cfg config) {
	for _i := range ls {
		ls[_i].config = cfg
	}
}
