// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/movie.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/RiskyFeryansyahP/bibit-gateway/internal/model"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMovieServiceClient is a mock of MovieServiceClient interface.
type MockMovieServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMovieServiceClientMockRecorder
}

// MockMovieServiceClientMockRecorder is the mock recorder for MockMovieServiceClient.
type MockMovieServiceClientMockRecorder struct {
	mock *MockMovieServiceClient
}

// NewMockMovieServiceClient creates a new mock instance.
func NewMockMovieServiceClient(ctrl *gomock.Controller) *MockMovieServiceClient {
	mock := &MockMovieServiceClient{ctrl: ctrl}
	mock.recorder = &MockMovieServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieServiceClient) EXPECT() *MockMovieServiceClientMockRecorder {
	return m.recorder
}

// GetMovieDetail mocks base method.
func (m *MockMovieServiceClient) GetMovieDetail(ctx context.Context, in *model.RequestMovieDetail, opts ...grpc.CallOption) (*model.MovieRPC, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMovieDetail", varargs...)
	ret0, _ := ret[0].(*model.MovieRPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieDetail indicates an expected call of GetMovieDetail.
func (mr *MockMovieServiceClientMockRecorder) GetMovieDetail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieDetail", reflect.TypeOf((*MockMovieServiceClient)(nil).GetMovieDetail), varargs...)
}

// SearchMovie mocks base method.
func (m *MockMovieServiceClient) SearchMovie(ctx context.Context, in *model.RequestSearchMovies, opts ...grpc.CallOption) (*model.ResponseSearchMovies, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchMovie", varargs...)
	ret0, _ := ret[0].(*model.ResponseSearchMovies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMovie indicates an expected call of SearchMovie.
func (mr *MockMovieServiceClientMockRecorder) SearchMovie(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovie", reflect.TypeOf((*MockMovieServiceClient)(nil).SearchMovie), varargs...)
}

// MockMovieServiceServer is a mock of MovieServiceServer interface.
type MockMovieServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMovieServiceServerMockRecorder
}

// MockMovieServiceServerMockRecorder is the mock recorder for MockMovieServiceServer.
type MockMovieServiceServerMockRecorder struct {
	mock *MockMovieServiceServer
}

// NewMockMovieServiceServer creates a new mock instance.
func NewMockMovieServiceServer(ctrl *gomock.Controller) *MockMovieServiceServer {
	mock := &MockMovieServiceServer{ctrl: ctrl}
	mock.recorder = &MockMovieServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieServiceServer) EXPECT() *MockMovieServiceServerMockRecorder {
	return m.recorder
}

// GetMovieDetail mocks base method.
func (m *MockMovieServiceServer) GetMovieDetail(arg0 context.Context, arg1 *model.RequestMovieDetail) (*model.MovieRPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieDetail", arg0, arg1)
	ret0, _ := ret[0].(*model.MovieRPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieDetail indicates an expected call of GetMovieDetail.
func (mr *MockMovieServiceServerMockRecorder) GetMovieDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieDetail", reflect.TypeOf((*MockMovieServiceServer)(nil).GetMovieDetail), arg0, arg1)
}

// SearchMovie mocks base method.
func (m *MockMovieServiceServer) SearchMovie(arg0 context.Context, arg1 *model.RequestSearchMovies) (*model.ResponseSearchMovies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMovie", arg0, arg1)
	ret0, _ := ret[0].(*model.ResponseSearchMovies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMovie indicates an expected call of SearchMovie.
func (mr *MockMovieServiceServerMockRecorder) SearchMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovie", reflect.TypeOf((*MockMovieServiceServer)(nil).SearchMovie), arg0, arg1)
}
