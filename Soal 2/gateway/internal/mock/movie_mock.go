// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/movie.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/RiskyFeryansyahP/bibit-gateway/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecaseMovie is a mock of UsecaseMovie interface.
type MockUsecaseMovie struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMovieMockRecorder
}

// MockUsecaseMovieMockRecorder is the mock recorder for MockUsecaseMovie.
type MockUsecaseMovieMockRecorder struct {
	mock *MockUsecaseMovie
}

// NewMockUsecaseMovie creates a new mock instance.
func NewMockUsecaseMovie(ctrl *gomock.Controller) *MockUsecaseMovie {
	mock := &MockUsecaseMovie{ctrl: ctrl}
	mock.recorder = &MockUsecaseMovieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecaseMovie) EXPECT() *MockUsecaseMovieMockRecorder {
	return m.recorder
}

// DetailMovie mocks base method.
func (m *MockUsecaseMovie) DetailMovie(ctx context.Context, input *model.RequestMovieDetail) (*model.MovieRPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetailMovie", ctx, input)
	ret0, _ := ret[0].(*model.MovieRPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetailMovie indicates an expected call of DetailMovie.
func (mr *MockUsecaseMovieMockRecorder) DetailMovie(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailMovie", reflect.TypeOf((*MockUsecaseMovie)(nil).DetailMovie), ctx, input)
}

// Search mocks base method.
func (m *MockUsecaseMovie) Search(ctx context.Context, input *model.RequestSearchMovies) (*model.ResponseSearchMovies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, input)
	ret0, _ := ret[0].(*model.ResponseSearchMovies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockUsecaseMovieMockRecorder) Search(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockUsecaseMovie)(nil).Search), ctx, input)
}

// MockRepositoryGRPCMovie is a mock of RepositoryGRPCMovie interface.
type MockRepositoryGRPCMovie struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryGRPCMovieMockRecorder
}

// MockRepositoryGRPCMovieMockRecorder is the mock recorder for MockRepositoryGRPCMovie.
type MockRepositoryGRPCMovieMockRecorder struct {
	mock *MockRepositoryGRPCMovie
}

// NewMockRepositoryGRPCMovie creates a new mock instance.
func NewMockRepositoryGRPCMovie(ctrl *gomock.Controller) *MockRepositoryGRPCMovie {
	mock := &MockRepositoryGRPCMovie{ctrl: ctrl}
	mock.recorder = &MockRepositoryGRPCMovieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryGRPCMovie) EXPECT() *MockRepositoryGRPCMovieMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockRepositoryGRPCMovie) GetByID(ctx context.Context, input *model.RequestMovieDetail) (*model.MovieRPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, input)
	ret0, _ := ret[0].(*model.MovieRPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryGRPCMovieMockRecorder) GetByID(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepositoryGRPCMovie)(nil).GetByID), ctx, input)
}

// Search mocks base method.
func (m *MockRepositoryGRPCMovie) Search(ctx context.Context, input *model.RequestSearchMovies) (*model.ResponseSearchMovies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, input)
	ret0, _ := ret[0].(*model.ResponseSearchMovies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockRepositoryGRPCMovieMockRecorder) Search(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepositoryGRPCMovie)(nil).Search), ctx, input)
}
